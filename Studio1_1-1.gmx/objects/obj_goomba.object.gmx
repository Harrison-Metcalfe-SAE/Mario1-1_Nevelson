<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_goomba</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///start
xAxis = 0;

//UpdateVars
xDelta = 0;
yDelta = 0;

spd = 5;
jumpVel = -15;
grav = 0.9;
tVel = 25;
turnAround = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///update

xDelta = xAxis*spd;

// If running into pipe
if (place_meeting(x + 1, y, obj_pipe) &amp;&amp; turnAround = false)
{
    turnAround = true;
}
if (place_meeting(x - 1, y, obj_pipe) &amp;&amp; turnAround = true)
{
    turnAround = false;
}


// If we are on the ground
if(place_meeting(x, y + 1, obj_wall) &amp;&amp; turnAround = true)
{
    yDelta = 0;
    xDelta -= 1;
}
else if(place_meeting(x, y + 1, obj_wall) &amp;&amp; turnAround = false)
{
    yDelta = 0;
    xDelta += 1;
}
else
{
    yDelta += grav;
    
    if(yDelta &gt; tVel)
        grav = tVel;
}



//XCollDetectionWall
while(place_meeting(x + xDelta, y, obj_wall))
{
    xDelta = (abs(xDelta) - 1) * sign(xDelta);
    if(xDelta == 0)
        break;
}

//YCollDetectionWall
while(place_meeting(x, y + yDelta, obj_wall))
{
    yDelta = (abs(yDelta) - 1) * sign(yDelta);
    if(yDelta == 0)
        break;
}

//XCollDetectionWall
while(place_meeting(x + xDelta, y, obj_wall))
{
    xDelta = (abs(xDelta) - 1) * sign(xDelta);
    if(xDelta == 0)
        break;
}

//YCollDetectionWall
while(place_meeting(x, y + yDelta, obj_wall))
{
    yDelta = (abs(yDelta) - 1) * sign(yDelta);
    if(yDelta == 0)
        break;
}

//XCollDetectionPipe
while(place_meeting(x + xDelta, y, obj_pipe))
{
    xDelta = (abs(xDelta) - 1) * sign(xDelta);
    if(xDelta == 0)
        break;
}

//YCollDetectionPipe
while(place_meeting(x, y + yDelta, obj_pipe))
{
    yDelta = (abs(yDelta) - 1) * sign(yDelta);
    if(yDelta == 0)
        break;
}

//XCollDetectionQuestionBlock
while(place_meeting(x + xDelta, y, obj_questionblock))
{
    xDelta = (abs(xDelta) - 1) * sign(xDelta);
    if(xDelta == 0)
        break;
}

//YCollDetectionQuestionBlock
while(place_meeting(x, y + yDelta, obj_questionblock))
{
    yDelta = (abs(yDelta) - 1) * sign(yDelta);
    if(yDelta == 0)
        break;
}

//XCollDetectionBrick
while(place_meeting(x + xDelta, y, obj_brick))
{
    xDelta = (abs(xDelta) - 1) * sign(xDelta);
    if(xDelta == 0)
        break;
}

//YCollDetectionBrick
while(place_meeting(x, y + yDelta, obj_brick))
{
    yDelta = (abs(yDelta) - 1) * sign(yDelta);
    if(yDelta == 0)
        break;
}

//XCollDetectionHill
while(place_meeting(x + xDelta, y, obj_hill))
{
    xDelta = (abs(xDelta) - 1) * sign(xDelta);
    if(xDelta == 0)
        break;
}

//YCollDetectionHill
while(place_meeting(x, y + yDelta, obj_hill))
{
    yDelta = (abs(yDelta) - 1) * sign(yDelta);
    if(yDelta == 0)
        break;
}

x+=xDelta;
y+=yDelta;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
